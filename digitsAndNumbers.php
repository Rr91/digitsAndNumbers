<?php
/**
	Возник вопрос:
		1) Требуется найти ОДНО число, которое имеет одинаковый набор цифр при умножении на 2, 3, 4, 5 и 6.
		2) Или отдельно для 2, 3, 4, 5 и 6 ?
		
		Несмотря на бесконечность натуральных чисел, первый вариант крайне затруднителен.
		НО программу я написал именно под него, хотя она и не имеет практического применения, т.к числа очень велики
*/
// образуем массив чисел содержайщий, наше число, и его произведения на 2,3,4,5,6
// при втором варианте это действие не нужно,т.к в функцию selection можно передавать два числа 
// наше и его произведение на нужный множитель
function arrCreate($num) 
{
	$arr = array();
	for ($i=0; $i < 2; $i++)
		$arr[$i] = $num * ($i+1);
	return $arr;
}
// функция перевода числа в массив ,состоящий из цифр входящих в число
// ограничивается максимальным int, чуть больше 2*10^9 
function digits($num)
{
	$arr = array();
	$i = 0;

	while($num >= 10)
	{
		$arr[$i] = $num % 10;
		$i++;
		$num = ($num-$num % 10)/10; // разность в скобках для избежания десятичных дробей
	}
	$arr[$i] = $num;
	return $arr;
}
// функция сравнения цифр в двух масивах получившихся из наших чисел
function compare($digitsBegin, $digitsEnd)
{
	for ($i=0; $i < count($digitsBegin); $i++) // в один цикл, т.к массивы были предварительно отсортированы
	{
		if($digitsBegin[$i] != $digitsEnd[$i]) return false;
	}
	return true;
}

// функция определяет соотвествует ли число условия отбора
// передаются массив созданный в arrCreate() и  $k - для движения по массиву
function selection($naturalNum, $k = 0) 
{
	if($k+1 == count($naturalNum)) return true; // выход из рекурсии
	if(strlen($naturalNum[$k]) == strlen($naturalNum[$k+1])) // проверка равенства длин чисел, чтобы избежать лишних сравнений, но быть может она сама отнимет больше времени :-)
	{
		$digitsBegin = preg_split('//', $naturalNum[$k], -1, PREG_SPLIT_NO_EMPTY);// вместо данных фунции можно использовать более быструю digits()
		$digitsEnd = preg_split('//', $naturalNum[$k+1], -1, PREG_SPLIT_NO_EMPTY);// но она корретно работает только до максимального int
																				  // тем более в php более характерна работа со строками
		sort($digitsBegin);//сортировка полученных массивов
		sort($digitsEnd);

		if(compare($digitsBegin, $digitsEnd))// сравнение на соответствие цифр
		{
			$k++; 					    // если соотвествуют наше число и его произведение на 2, переходим по массиву, 
				  					    //для определения соотвествия произведения на 2 и на 3, потом 3 и 4 и.т.д
			selection($naturalNum, $k); // рекурсия с тем же массивом, но ключем к следующему значению
			return true; 
		}
		else return false;// если наше число и его произведение на 2, не совпадают набором цифр, переходим к следующему числу
	}
}
function search($num)
{
	while (true && $num < 2000000000) // ограничитель , чтоб без глюков
	{
		if( selection(arrCreate($num))) 
			return  $num; 
		$num++;
	}
	return "malo";
}

echo search(1); // начинаем перебор с наименьшего натурального числа - 1
		

?>